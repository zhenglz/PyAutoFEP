#
#  GLOBALS - options used on all scripts
#
[globals]
# Controls the verbosity level. -1: be quiet; 0: default output; 1: turns on some useful warnings; 2: warnings + some
# further info; 3: warnings + info + LOTS of debug messages + rdkit messages; 4: all the previous + (tons of) openbabel
# messages)
verbose = 0

# Where possible, use this many threads (default: 0: max supported by the system)
threads = 0

# (graph, 3d) Select MCS algorithm. "graph" (default) selects rdkit FindMCS - with some small customizations - and is
# suitable for molecules where no sterocenters are inverted on perturbations. This algorithm is aware of rings and ring
# breaks. "3d" selects a spatial-guided MCS, which works on perturbed stereocenters. This algorithm uses sequential,
# expanding core-constrained embedding to construct a MCS, but may break rings.
mcs_type = graph

# (bool) Where possible, plot data using matplotlib
plot = True


#
#  generate_perturbation_map - options relevant for generate_perturbation_map.py
#
[generate_perturbation_map]

# (bool) Hydrogens count to score perturbations
use_hs = False

### The following options are general to all maps ###
# Choose type of perturbation map: optimal (default, a connected map optimizing maximum distance between molecules and
# the number of perturbed heavy atoms), star (one central molecule, perturbed to all others), or wheel (same as
# star, but all non-center molecules are connected to two others, so all molecules are in closed cycles)
map_type = optimal

### The following options are only used to generate an optimal map using ACO algorithm ###
# (float) Number of ant runs. Use -1 to select
map_runs = -1

# (float) Pheromone biasing exponent. Controls the effect of the pheromone on the desirability of an edge
map_alpha = 1.0

# (float) Cost biasing exponent. Controls the effect of the cost on the desirability of an edge
map_beta = 1.0

# (integer; x = -1, x > 0) Max path length (-1 = off). This will be the maximum allowed distance between any two nodes
# (molecules) in the resulting graph.
optimal_max_path = 5

# (float, x >= 0) The intensity of deposited pheromone. Set to 0 to disable pheromone, effectively defeating the purpose
# of the algorithm.
map_pheromone_intensity = 0.1

# (float, x >= 0) How fast the pheromone evaporates. At the begin of each communication turn, pheromone on all edges
# will be set to (1 - map_evaporating_rate) * deposited amount
map_evaporating_rate = 0.3

# (float, x >= 0) Minimal desirability of an edge. Larger values may lead to slower convergence, but more sampling
map_min_desirability = 0.1

# (int, x > 0) Communicate between threads every this much steps (Default: 10). Pheromone will be deposited during
# the communication step, so setting a too large value here will impair the ACO algorithm
map_communication_frequency = 20

# (float, x > 0) Deposit at most this much pheromone per run. -1: no limit.
map_max_pheromone_deposited = -1

# (int, x > 0, float 0.0 < x < 1.0 or x = -1) Use this many best solutions to update pheromone matrix. If 0 < x < 1,
# x will be taken as a ratio (x*n_solutions best solutions will be used), if x >= 1, ceil(x) best solutions will be used
map_elitism = 0.1

# (float, x > 0) Multiplier for perturbation score
optimal_perturbation_multiplier = 1

# (float) Exponent for perturbation score
optimal_perturbation_exponent = 1.2

# (float) Exponent for length cost. 0: disable length cost scoring. Setting this will yield graphs with smaller
# distances (ie: number of edges/perturbations) between vertices (molecules), at the cost of a denser graph and
# allowing larger perturbations.
optimal_length_exponent = 0

# (float) Default multiplier for order cost. 0: disable order cost scoring. Setting this will yield graph with more
# edges (perturbations) per vertices (molecules) at the cost of a denser graph.
optimal_degree_multiplier = 0

# (float) Exponent for degree cost.
optimal_degree_exponent = 1.5

# (int, x > 0) Each molecule must be part at least this much perturbations. Using 2 means all molecules will be part of
# a closed cycle. Note that using 0 will not create disconnected graphs.
optimal_min_edges_per_node = 2

# (float x >= 0) Extra edge beta parameter. Larger values allows more edges than the minimum amount. If x = 0, extra
# edges will be disabled and the graph will have the minimum number of edges
optimal_extra_edge_beta = 2

# (int, x > 0) Number of runs when all edges can be removed. -1: edges can be removed on all runs. Setting this will
# speed up the execution but may reduce sampling.
optimal_unbound_runs = -1

# (float, x > 0) Edges with this much pheromone become static. -1: edges never become static. Setting this will speed
# up the execution but may reduce sampling.
optimal_permanent_edge_threshold = -1


#
#  prepare_dual_topology - options relevant for prepare_dual_topology.py
#
[prepare_dual_topology]
# Reads (if --pre_solvated is used, but maybe omitted in this case as well) or saves (otherwise) system topology from
# this file
topology = SystemFull.top

# Index file to be created (if pre_solvated = False) or read (if pre_solvated = True)
index = index.ndx

# Method to be used in the selection of water molecules to be removed (internal (default, simple method),
# mdanalysis (more flexible, requires mdanalysis module)
selection_method = internal

### The following options to control Gromacs invoking ###
# Use this local Gromacs binary to prepare the system
gmx_bin_local = gmx

# Use this Gromacs binary to run the MD. This should be the Gromacs bin in the run node, not in the current machine
gmx_bin_run = gmx

# Pass this maxwarn to gmx
gmx_maxwarn = 1

### The following options are only relevant if pre_solvated = False ###
# (int) Use this force field, numeric value passed to pdb2gmx (Default: 1; if a FF is present on current dir (ie: using
# extradirs, it will be number 1 in pdb2gmx). See your pdb2gmx manual for further reference.
buildsys_forcefield = 1

# (float x >= 0.0) Distance, in Angstroms, between the solute and the box (will be passed to gmx editconf)
buildsys_watershell = 10.0

# (choices: triclinic, cubic, dodecahedron, octahedron) Box type used to build the complex and water systems
buildsys_boxtype = dodecahedron

# (float, x >= 0.0) Add ions to this concentration (mol/L) (will be passed to gmx genion)
buildsys_ionconcentration = 0.15

# Name of the positive ion (will be passed to gmx genion, see Gromacs manual)
buildsys_nname = CL

# Name of the negative ion (will be passed to gmx genion, see Gromacs manual)
buildsys_pname = NA

### The following options are only relevant if pre_solvated = True ###
# (boolean) Use a pre-solvated structure
pre_solvated = False

# (float, x >= 0.0) Remove water molecules this close, in Angstroms, to ligand (Default: 1.0 A)
presolvated_radius = 1.0

# (int, x > 0) Number of distinct protein chains in your presolvated system
presolvated_protein_chains = 1

# (choices: [Off, maximum, average, minimum]) Use soft-core for Van de Waals potential on the ligand. Selects the
# function used to calculate the effective soft-core lambda.
perturbations_softcore = minimum

### The following options controls perturbation scheme ###
# (str, dict) Dictionary of lambda values or input file (text or pickle) containing lambda values
lambda_input = lambdas12

# (choices: [default_nosc, charmm_nosc]) Use these group of mdp templates to setup minimization, equilibration, and run
# steps
template_mdp = default_nosc

### The following options controls enhanced sampling (solute scaling and HREX) ###
# (float, 0.0 <= x <= 1.0) Solute scaling value on the center-most window. (-1: off, does not use solute scaling;
# other float value between 0.0 and 1.0: scale constant)
solute_scaling = -1

# (choices: [rest1, rest2, [any_path]]) Path to the a executable capable of applying solute tempering/scaling on a Gromacs topology.
# Options: rest1 (internal REST script), rest2 (internal REST2 script), a path to a executable capable of applying
# scaling to a topology
solute_scaling_bin = rest2

# (int, x >= 0) Attempt frequency of Hamiltonian Replica Exchange (requires a Plumed-patched Gromacs binary
# default: 0: no HREX, any integer > 0: replica-exchange frequency)
hrex = 0

### The following options are used to control the MD sampling ###

# (float, x > 0) Absolute temperature of MD
md_temperature = 298.15

# (float, x > 0) Simulation length, in ps.
md_length = 5000.0

### The following options controls the scripts and directories generated ###

# (choices: [bin, tgz, dir]) Select output as a self-extracting binary (bin, default), a compressed tgz file (tgz), or
# a regular directory (dir)
output_packing = bin

# (choices: bash, slurm, pbs) Select the type of output script to be generated. Choices: bash (simple bash scripts),
# slurm (scripts to be submitted to a Slurm job manager), pbs (scripts to be submitted to a Torque job manager)
output_scripttype = bash

# (choices: [bin, python, no_collect, [user script]]) Select type of script to be used to process results during the
# collect stage. python: simple python3 script reads xvg data and produces a Pickle to be processed by
# analyze_results.py, requires python3 on run node. bin: binary to read xvg data and prepare a Pickle to be processed
# by analyze_results.py no_collect: does not collect xvg data. [user script]: executable to be run in the collect stage
output_collecttype = bin

# (int, x > 0, x = -1) Use this many jobs during rerun, collect and analysis steps. GNU Parallel will be used to run
# parallel instances. You may want to benchmark your run node to set this to the best value. Rerun step is the slowest
# one affected by this setting. -1 will guess the number of jobs based upon the run node resources.
output_njobs = -1

# (bool) Use a hidden temporary directory for file operations. If False, a dir in $PWD will be used
output_hidden_temp_dir = True

#
#  analyze_results - options relevant for analyze_results.py
#
[analyze_results]
# (choices: [kJ, kcal, kBT]) Use this unit in the output. Default: kJ/mol
units = kJmol

# (int, x >= 0) First frame (ps) to read from trajectory, in ps
first_frame = 0

# (int, x >= 0) Last frame (ps) to read from trajectory, in ps. Default: -1 = read all
last_frame = -1

# (bool) Pre-analyze frames and calculate \tau_c. (Default: no)
calculate_tau_c = False

# (choices: [bar, mbar]) Use these estimators to calculate relative free energy. Options: bar, mbar
estimators = mbar

# (choices: [shortest, shortest_average, all_averages, all_weighted_averages]) Use this method to calculate
# \u0394\u0394G to the center molecules. Default: shortest
center_ddg_method = shortest